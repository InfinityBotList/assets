// Code generated by tygo. DO NOT EDIT.
import { DiscordUser } from "./eureka-dovewing"
import { TeamPermissions } from "./team-perms"
import { PermDetailMap } from "./teams-misc"

//////////
// source: alert.go

export type AlertType = string;
export const AlertTypeSuccess: AlertType = "success";
export const AlertTypeError: AlertType = "error";
export const AlertTypeInfo: AlertType = "info";
export const AlertTypeWarning: AlertType = "warning";
export type AlertPriority = number /* int */;
export const AlertPriorityLow: AlertPriority = 0;
export const AlertPriorityMedium: AlertPriority = 1;
export const AlertPriorityHigh: AlertPriority = 2;
export interface Alert {
  itag: string /* uuid */;
  url: string | null /* nullable */; // Optional
  message: string;
  type: AlertType;
  title: string;
  created_at: string | null /* RFC3339, nullable */;
  acked: boolean;
  alert_data: { [key: string]: any}; // Optional
  icon: string; // Optional
  priority: AlertPriority; // Optional
}
export interface AlertList {
  alerts: Alert[];
}

//////////
// source: announcement.go

/**
 * An announcement
 */
export interface Announcement {
  author?: DiscordUser /* from eureka-dovewing.ts */; // Must be parsed internally
  id: string /* uuid */;
  title: string;
  content: string;
  last_modified: string /* RFC3339 */;
  status: string;
  target: string | null /* nullable */;
}
export interface AnnouncementList {
  announcements: Announcement[];
}

//////////
// source: apps.go

export interface Question {
  id: string;
  question: string;
  paragraph: string;
  placeholder: string;
  short: boolean;
}
export interface Position {
  id: string;
  tags: string[];
  info: string;
  name: string;
  questions: Question[];
  hidden: boolean;
  closed: boolean;
}
export interface AppMeta {
  positions: Position[];
  stable: boolean; // Stable means that the list of apps is not pending big changes
}
export interface AppResponse {
  app_id: string;
  user_id: string;
  questions: Question[];
  answers: { [key: string]: string};
  state: string;
  created_at: string /* RFC3339 */;
  position: string;
  review_feedback?: string;
}
export interface AppListResponse {
  apps: AppResponse[];
}

//////////
// source: blog.go

export interface BlogPost {
  slug: string;
  title: string;
  description: string;
  author?: DiscordUser /* from eureka-dovewing.ts */;
  created_at: string /* RFC3339 */;
  content: string;
  draft: boolean;
  tags: string[];
}
export interface BlogListPost {
  slug: string;
  title: string;
  description: string;
  author?: DiscordUser /* from eureka-dovewing.ts */;
  created_at: string /* RFC3339 */;
  draft: boolean;
  tags: string[];
}
export interface Blog {
  posts: BlogListPost[];
}
export interface PublishBlogPost {
  draft: boolean;
}
export interface CreateBlogPost {
  slug: string;
  title: string;
  description: string;
  content: string;
  tags: string[];
}
export interface EditBlogPost {
  title: string;
  description: string;
  content: string;
  tags: string[];
}

//////////
// source: bot.go

/**
 * @ci table=bots, unfilled=1
 * Represents a 'index bot' (a small subset of the bot object for use in cards etc.)
 */
export interface IndexBot {
  bot_id: string;
  user?: DiscordUser /* from eureka-dovewing.ts */; // Must be parsed internally
  short: string;
  long: string;
  type: string;
  vanity: string;
  votes: number /* int */;
  shards: number /* int */;
  library: string;
  invite_clicks: number /* int */;
  servers: number /* int */;
  nsfw: boolean;
  tags: string[];
  premium: boolean;
  clicks: number /* int */;
  banner: string | null /* nullable */;
}
/**
 * @ci table=bots, unfilled=1
 * Queue bots are similar to index bots but specifically for the bot queue, they do not have all the information needed to be a `IndexBot`
 * and neither does `IndexBot` provide all the information needed to be a `QueueBot`
 */
export interface QueueBot {
  bot_id: string;
  user?: DiscordUser /* from eureka-dovewing.ts */; // Must be parsed internally
  short: string;
  long: string;
  type: string;
  nsfw: boolean;
  tags: string[];
  premium: boolean;
  clicks: number /* int */;
  claimed_by?: DiscordUser /* from eureka-dovewing.ts */; // Must be parsed internally
  banner: string | null /* nullable */;
}
export interface BotStats {
  servers: number /* uint64 */;
  shards: number /* uint64 */;
  users: number /* uint64 */;
  shard_list: number /* uint64 */[];
}
/**
 * @ci table=bots
 * Bot represents a bot.
 */
export interface Bot {
  itag: string /* uuid */;
  bot_id: string;
  client_id: string;
  queue_name: string; // Used purely by the queue system
  queue_avatar: string;
  extra_links: Link[];
  tags: string[];
  prefix: string;
  user?: DiscordUser /* from eureka-dovewing.ts */; // Must be parsed internally
  owner?: DiscordUser /* from eureka-dovewing.ts */; // Must be parsed internally
  short: string;
  long: string;
  library: string;
  nsfw: boolean;
  premium: boolean;
  servers: number /* int */;
  shards: number /* int */;
  shard_list: number /* int */[];
  users: number /* int */;
  votes: number /* int */;
  clicks: number /* int */;
  unique_clicks: number /* int64 */; // Must be parsed internally
  invite_clicks: number /* int */;
  banner: string | null /* nullable */;
  invite: string;
  type: string;
  vanity: string;
  vote_banned: boolean;
  start_premium_period: string | null /* RFC3339, nullable */;
  premium_period_length: Interval; // Must be parsed internally
  cert_reason: string | null /* nullable */;
  uptime: number /* int */;
  total_uptime: number /* int */;
  uptime_last_checked: string | null /* RFC3339, nullable */;
  claimed_by: string | null /* nullable */;
  approval_note: string | null /* nullable */;
  created_at: string | null /* RFC3339, nullable */;
  last_claimed: string | null /* RFC3339, nullable */;
  webhooks_v2: boolean;
  team_owner?: Team; // Must be parsed internally
  captcha_opt_out: boolean;
}
/**
 * @ci table=bots, unfilled=1
 * CreateBot represents the data sent for the creation of a bot.
 */
export interface CreateBot {
  bot_id: string; // impld
  client_id: string; // impld
  short: string; // impld
  long: string; // impld
  prefix: string; // impld
  invite: string; // impld
  banner?: string; // impld
  library: string; // impld
  extra_links: Link[]; // Impld
  tags: string[];
  nsfw: boolean;
  staff_note?: string; // impld
  team_owner: string; // May or may not be present
}
export interface BotSettingsUpdate {
  short: string; // impld
  long: string; // impld
  prefix: string; // impld
  invite: string; // impld
  banner?: string; // impld
  library: string; // impld
  extra_links: Link[]; // Impld
  tags: string[];
  nsfw: boolean;
  captcha_opt_out: boolean;
}
export interface QueueBots {
  bots: QueueBot[];
}
export interface Invite {
  invite: string;
}
/**
 * List Index
 */
export interface ListIndexBot {
  certified: IndexBot[];
  premium: IndexBot[];
  most_viewed: IndexBot[];
  packs: IndexBotPack[];
  recently_added: IndexBot[];
  top_voted: IndexBot[];
}

//////////
// source: common.go

/**
 * A link is any extra link
 */
export interface Link {
  name: string;
  value: string;
}
export interface Interval {
  duration: any /* time.Duration */;
  string: string;
  secs: number /* int */;
}
/**
 * SEO object (minified bot/user/server for seo purposes)
 */
export interface SEO {
  username: string;
  id: string;
  avatar: string;
  short: string;
}
/**
 * This represents a IBL Popplio API Error
 */
export interface ApiError {
  context?: { [key: string]: string};
  message: string;
  error: boolean;
}
/**
 * OauthInfo struct for oauth2 info
 */
export interface OauthUser {
  id: string;
  username: string;
  discriminator: string;
}
/**
 * Paged result common
 */
export interface PagedResult<T extends any> {
  count: number /* uint64 */;
  per_page: number /* uint64 */;
  results: T[];
}
export interface TokenResetResponse {
  token: string;
}

//////////
// source: notifications.go

export interface NotificationInfo {
  public_key: string;
}
/**
 * A user subscription for push notifications
 */
export interface UserSubscription {
  auth: string;
  p256dh: string;
  endpoint: string;
}
/**
 * Notification
 */
export interface NotifGet {
  endpoint: string;
  notif_id: string;
  created_at: string /* RFC3339 */;
  browser_info: NotifBrowserInfo; // Must be parsed from UA internally
}
export interface NotifBrowserInfo {
  /**
   * The OS of the browser
   */
  os: string;
  browser: string;
  browser_ver: string;
  mobile: boolean;
}
export interface NotifGetList {
  notifications: NotifGet[];
}

//////////
// source: pack.go

/**
 * Represents a Bot Pack
 */
export interface BotPack {
  owner?: DiscordUser /* from eureka-dovewing.ts */;
  name: string;
  short: string;
  votes: PackVote[];
  tags: string[];
  url: string;
  created_at: string /* RFC3339 */;
  bot_ids: string[];
  bots: ResolvedPackBot[];
}
export interface ResolvedPackBot {
  user?: DiscordUser /* from eureka-dovewing.ts */;
  short: string;
  type: string | null /* nullable */;
  vanity: string | null /* nullable */;
  banner: string | null /* nullable */;
  nsfw: boolean;
  premium: boolean;
  shards: number /* int */;
  votes: number /* int */;
  invite_clicks: number /* int */;
  servers: number /* int */;
  tags: string[];
}
export interface IndexBotPack {
  owner_id: string;
  name: string;
  short: string;
  votes: PackVote[];
  tags: string[];
  url: string;
  created_at: string /* RFC3339 */;
  bot_ids: string[];
}
/**
 * Pack vote
 */
export interface PackVote {
  user_id: string;
  upvote: boolean;
  created_at: string /* RFC3339 */;
}

//////////
// source: partners.go

export interface Partner {
  id: string;
  name: string;
  image: string;
  short: string;
  links: Link[];
  /**
   * Internal field
   */
  user?: DiscordUser /* from eureka-dovewing.ts */;
}
export interface PartnerList {
  featured: (Partner | undefined)[];
  bot_partners: (Partner | undefined)[];
  bot_list_partners: (Partner | undefined)[];
}

//////////
// source: payments.go

export interface PaymentPlan {
  id: string;
  name: string;
  benefit: string; // To be fixed
  time_period: number /* int */; // In seconds
  price: number /* float32 */; // In USD
}
export interface PlanList {
  plans: PaymentPlan[];
}

//////////
// source: reminder.go

export interface ResolvedReminderBot {
  name: string;
  avatar: string;
}
export interface Reminder {
  user_id: string;
  bot_id: string;
  resolved: ResolvedReminderBot;
  created_at: string /* RFC3339 */;
  last_acked: string /* RFC3339 */;
}
export interface ReminderList {
  reminders: Reminder[];
}

//////////
// source: review.go

/**
 * A review is a review on ibl
 */
export interface Review {
  id: string /* uuid */;
  bot_id: string;
  author?: DiscordUser /* from eureka-dovewing.ts */;
  content: string;
  stars: number /* int32 */;
  created_at: string /* RFC3339 */;
  parent_id: string /* uuid */;
}
export interface ReviewList {
  reviews: Review[];
}

//////////
// source: search.go

export interface SearchFilter {
  from: number /* uint32 */;
  to: number /* uint32 */;
}
export type TagMode = string;
export const TagModeAll: TagMode = "@>";
export const TagModeAny: TagMode = "&&";
export interface TagFilter {
  tags: string[];
  tag_mode: TagMode;
}
export interface SearchQuery {
  query: string;
  servers: SearchFilter;
  votes: SearchFilter;
  shards: SearchFilter;
  tags: TagFilter;
}
export interface SearchResponse {
  bots: IndexBot[];
}

//////////
// source: server.go

export interface Server {
  server_id: string;
  name: string;
  avatar: string;
  total_members: number /* int */;
  online_members: number /* int */;
  short: string;
  long: string;
  state: string;
  vanity: string;
  extra_links: Link[];
  team_owner?: Team; // Must be parsed internally
}

//////////
// source: stafftemplates.go

export interface StaffTemplateList {
  templates: StaffTemplateMeta[];
}
export interface StaffTemplateMeta {
  name: string;
  icon: string;
  description: string;
  templates: StaffTemplate[];
}
export interface StaffTemplate {
  name: string;
  emoji: string;
  tags: string[];
  description: string;
}

//////////
// source: stats.go

export interface ListStats {
  total_bots: number /* int64 */;
  total_approved_bots: number /* int64 */;
  total_certified_bots: number /* int64 */;
  total_staff: number /* int64 */;
  total_users: number /* int64 */;
  total_votes: number /* int64 */;
  total_packs: number /* int64 */;
  total_tickets: number /* int64 */;
}
export interface StatusDocs {
  key1: string;
  key2: string;
  key3: string;
  etc: string;
}
export interface StaffTeam {
  members: UserPerm[];
}

//////////
// source: teams.go

export interface Team {
  id: string;
  name: string;
  avatar: string;
  members: TeamMember[];
  user_bots: UserBot[]; // Bots that are owned by the team
}
export interface TeamMember {
  user?: DiscordUser /* from eureka-dovewing.ts */;
  perms: TeamPermissions /* from teamPerms.ts */[];
  created_at: string /* RFC3339 */;
}
export interface CreateTeam {
  name: string;
  avatar: string;
}
export interface CreateTeamResponse {
  team_id: string /* uuid */;
}
export interface PermissionResponse {
  perms: PermDetailMap /* from teams-misc.ts */[];
}

//////////
// source: ticket.go

export interface Ticket {
  id: string;
  channel_id: string;
  topic_id: string;
  issue: string;
  ticket_context: { [key: string]: string};
  messages: Message[];
  author?: DiscordUser /* from eureka-dovewing.ts */;
  close_user?: DiscordUser /* from eureka-dovewing.ts */;
  open: boolean;
  created_at: string /* RFC3339 */;
}
export interface Message {
  id: string;
  timestamp: string /* RFC3339 */; // Not in DB, but generated from snowflake ID
  content: string;
  embeds: (any /* discordgo.MessageEmbed */ | undefined)[];
  author_id: string;
  author?: DiscordUser /* from eureka-dovewing.ts */;
  attachments: (any /* discordgo.MessageAttachment */ | undefined)[];
}

//////////
// source: user.go

export type UserExperiment = string;
export const ServerListingUserExperiment: UserExperiment = "SERVER_LISTING";
export interface UserLogin {
  token: string;
  user_id: string;
}
/**
 * @ci table=users
 */
export interface User {
  itag: string /* uuid */;
  user?: DiscordUser /* from eureka-dovewing.ts */; // Must be handled internally
  experiments: string[];
  staff_onboarded: boolean;
  staff_onboard_state: string;
  staff_onboard_last_start_time: string | null /* RFC3339, nullable */;
  staff_onboard_guild: string | null /* nullable */;
  staff_rpc_last_verify: string | null /* RFC3339, nullable */;
  staff: boolean;
  admin: boolean;
  hadmin: boolean;
  certified: boolean;
  ibldev: boolean;
  iblhdev: boolean;
  owner: boolean;
  bot_developer: boolean;
  bug_hunters: boolean;
  captcha_sponsor_enabled: boolean;
  extra_links: Link[];
  about: string | null /* nullable */;
  vote_banned: boolean;
  banned: boolean;
  user_bots: UserBot[]; // Must be handled internally
  user_teams: Team[]; // Must be handled internally
  user_packs: IndexBotPack[]; // Must be handled internally
}
export interface UserBot {
  bot_id: string;
  user?: DiscordUser /* from eureka-dovewing.ts */;
  short: string;
  type: string;
  vanity: string;
  votes: number /* int */;
  shards: number /* int */;
  library: string;
  invite_clicks: number /* int */;
  clicks: number /* int */;
  servers: number /* int */;
  nsfw: boolean;
  tags: string[];
  premium: boolean;
}
export interface UserPerm {
  user?: DiscordUser /* from eureka-dovewing.ts */; // Must be handled internally
  experiments: string[];
  banned: boolean;
  captcha_sponsor_enabled: boolean;
  vote_banned: boolean;
  staff: boolean;
  admin: boolean;
  hadmin: boolean;
  ibldev: boolean;
  iblhdev: boolean;
  owner: boolean;
}

//////////
// source: vote.go

/**
 * Vote Info
 */
export interface VoteInfo {
  is_weekend: boolean;
  vote_time: number /* uint16 */;
}
export interface UserVote {
  user_id: string;
  ts: number /* int64 */[];
  has_voted: boolean;
  last_vote_time: number /* int64 */;
  vote_info: VoteInfo;
  premium_bot: boolean;
}

//////////
// source: webhook.go

/**
 * Webhook log
 */
export interface WebhookLogEntry {
  id: string /* uuid */;
  entity_id: string /* uuid */;
  entity_type: string;
  user_id: string /* uuid */;
  url: string;
  data: string;
  sign: string;
  created_at: string /* RFC3339 */;
  state: string;
  tries: number /* int */;
  last_try: string /* RFC3339 */;
}
export interface PatchBotWebhook {
  webhook_url: string;
  webhook_secret: string;
  webhooks_v2?: boolean;
  clear: boolean;
}
